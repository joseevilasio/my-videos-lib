# .github/workflows/main.yml
name: CI

on: 
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

  workflow_dispatch:


jobs:
  lint:
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.9']
        os: [ubuntu-latest]
    runs-on: ${{matrix.os}}

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}} 

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Project 
        run: poetry install

      - name: Look for style errors
        run: poetry run pflake8

      - name: Check for in importing style
        run: poetry run isort --profile=black  api tests

      - name: Look for auto format errors
        run: poetry run black --check --diff api tests

  tests:
    needs: lint

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9']
        os: [ubuntu-latest]

    runs-on: ${{matrix.os}}

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
          
    steps: 

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2      
        with:
          python-version: ${{matrix.python-version}}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Project 
        run: poetry install

      - name: Export variable TOKEN
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
        env:
          TOKEN_VARS: ${{ env.TOKEN }}
      

      - name: Export variable TOKEN TESTE
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
        env:
          TOKEN_TESTE: ${{ env.TOKEN_TESTE }}
        
      - name: Export variable JWT TOKEN
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
        env:
          JWT_TOKEN_TEST_VARS: ${{ secrets.JWT_TOKEN_TEST }}


      - name: Print variable
        run: echo "${{ env.TOKEN }}"
      - name: Print variable test
        run: echo "${{ env.TOKEN_TESTE}}"
      - name: Print variable secret
        run: echo "${{ secrets.JWT_TOKEN_TEST}}"

      - name: Print variable VARS
        run: echo "${{ vars.TOKEN_VARS }}"
      - name: Print variable test VARS
        run: echo "${{ vars.TOKEN_TESTE_VARS}}"
      - name: Print variable VARS
        run: echo "${{ vars.JWT_TOKEN_TEST_VARS}}"


      - name: Run tests         
        run: poetry run pytest -v --forked --junitxml=test-result.xml
      - name: Run tests CI cov
        run: make citest

      - name: publish junit results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: junit/**/*.xml
          check_name: Test Result (Python ${{matrix.python-version}})

      - name: "Upload coverage to Codecov"
        if: ${{ matrix.python-version == '3.9' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true
